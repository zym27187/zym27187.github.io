{"pages":[{"title":"404","text":"","path":"404/index.html","date":"06-04","excerpt":""},{"title":"关于我","text":"网站管理员：ElenaGitHub账号：zym27187","path":"about/index.html","date":"06-03","excerpt":""},{"title":"categories","text":"","path":"categories/index.html","date":"06-03","excerpt":""},{"title":"message","text":"留言板——有什么问题可以在这里留言","path":"message/index.html","date":"06-04","excerpt":""},{"title":"tags","text":"","path":"tags/index.html","date":"06-03","excerpt":""},{"title":"search","text":"","path":"search/index.html","date":"06-04","excerpt":""}],"posts":[{"title":"查看Android的appPackage和Activity的便捷方法","text":"清除logcat内容，使用命令adb logcat -c 启动logcat，使用命令adb logcat ActivityManager:I *:s 启动要查看的程序， tips:一般cmp=appPackage/Activity这样的结构出现，比如上述appPackage为”com.cola.ui“,Activity为 “.ColaBox“","path":"2020/09/28/查看Android的appPackage和Activity的便捷方法/","date":"09-28","excerpt":"","tags":[{"name":"Appium","slug":"Appium","permalink":"https://zym27187.github.io/tags/Appium/"}],"preview":"https://i.loli.net/2019/08/06/KvP2RkjTQWAUzSH.png"},{"title":"Postman界面及常用功能介绍","text":"技术相关Postman 以及你可能需要了解:JavaScript 前言&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;迟来的咕咕（最近终于腾出时间了），Postman界面及常用功能介绍，基于之前公司非保密性的培训文件内容，我看写的比较清晰，就放在这里了。接口基本知识简介接口测试定义：测试系统组件间接口的一种测试。接口测试主要用于检测外部系统与系统之间以及内部各个子系统之间的交互点。测试的重点是要检查数据的交换，传递和控制管理过程，以及系统间的相互逻辑依赖关系等。 接口测试-目的测试接口的正确性和稳定性 接口测试-原理模拟客户端向服务器发送请求报文，服务器接收请求报文后对相应的报文做处理并向客户端返回应答，客户端接收应答的一个过程 接口测试-优点为高复杂性的平台带来高效的缺陷监测和质量监督能力；平台越复杂，系统越庞大，接口测试的效果越明显（提高测试效率，提升用户体验，降低研发成本） 接口测试-常见接口 1.webService接口：走soap协议通过http传输，请求报文和返回报文都是xml格式的。 2.Http Api接口（应用程序编程接口）：走http协议，通过路径来区分调用的方法，请求报文都是key-value形式的，返回报文一般都是json串。 接口测试-Http请求构成 1.请求方法URL协议/版本 2.请求头 3.请求体 接口测试-常用的请求方法 GET：向特定的资源发出请求。（数据展示在URL上） POST：向指定资源提交数据进行处理请求（数据包含在请求体中，可能会导致新的资源的建立或已有资源的修改） PUT：向指定资源位置上传其最新内容。（请求方式类似POST） DELETE：请求服务器删除请求URL所标识的资源。（请求方式类似GET） Postman界面常用介绍 Postman界面高级介绍 Postman常用操作介绍1.使用File -&gt; New Tab 或者工作台中的“+”图标创建一个新的工作台； 2.根据研发提供的接口数据实际情况，选择相应的接口请求方法和请求路径；例：全民营销后台管理，个体推广员查询接口，请求方法：POST，接口路径/marketing/platform/promoter/user/queryPage 3.根据研发提供的接口数据实际情况，根据需求添加Cookies、Token等认证数据，传输数据类型，浏览器版本等配置。一般只是需要根据需求添加Cookies或Token，其他会自动在发送时添加。例：通过登录全民营销抓包获取Cookies，复制添加到Headers中。（Content-Type会在添加Body时自动添加可忽略） 4.根据研发提供的接口数据实际情况，在Body中添加请求数据（常用情况适合post、put请求），请求数据类型必须严格按照接口所需类型，通常情况下选择x-www-form-urlencoded、raw。x-www-form-urlencoded：会将表单内的数据转换为键值对，raw：可以上传任意格式的文本，可以上传text、json、xml、html等。例：个体推广员查询接口数据类型为x-www-form-urlencoded，故使用图1的方式添加请求数据 5.为了提高效率，可在Tests中设置断言，减少人工检验的步骤（需一定的学习成本，可以通过代码在Tests功能中实现更多的功能，例如：将当前接口响应返回的数据加入测试集的环境变量中等） 例：对个体推广员查询接口设置响应断言，断言响应状态码为200。 6.根据研发提供的接口数据实际情况，填好相应的数据后，点击Send便向服务器发送请求。在Response处可查看服务器返回结果，结合数据库与研发提供的接口数据进行人工测试校验。Body：响应数据，一般使用默认的Pretty（格式化json/xml格式的内容）即可，Pretty可根据需求选择格式化内容。Cookies：常用于调用登录接口获取Cookies时查看，相对在Headers中获取直观。Headers：返回的响应头，很少关注。Test Results：在设置断言后有效，查看测试结果。（通过PASS，失败FAIL，并展示断言描述及失败原因）Status：服务器返回的状态码，2开头的状态码说明请求是成功的，3开头的状态码说明请求被重定向了，4开头的状态码说明请求端发送的请求存在问题，5开头的状态码说明服务器处理请求存在问题。详情通过百度搜索查阅。Time：服务器该接口的响应时间，衡量接口性能的其中一个标准。Size：返回请求的大小，很少关注。 Postman高级功能简介&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上面简单介绍了常用的postman进行接口测试的操作，主要以人工测试接口为主，当然Postman也拥有自动化接口测试的持续集成功能，但缺点是需要一定的JS语言基础，进行断言的编写，变量参数的测试脚本编写，并需要搭建三方程序环境与数据库进行交互。 这里简单介绍下一些高级功能： Tests：断言，自动化实现的关键，根据预期数据进行接口正确性的判断，将接口的返回数据添加到环境变量，为下个接口提供数据等，节省了人工时间。 测试集Collections：根据接口测试用例，对测试接口进行分类。执行测试集，根据排序从上到下执行所有接口测试。 Cookies：为整个测试集提供Cookies，多用于用户登陆后调用的接口。 Environment：为整个测试集提供环境变量，如基础的Url、Token、Cookies等。 Import：从外部导入现成测试集，测试接口，环境变量，认证数据等，需json格式。 Pre-request Script:设置发起请求的前置条件，需使用JS编写。 Mocks：模拟服务器返回自定义的数据进行接口测试。 Code：生成选择语言相应的接口请求的基础代码…… 1.点击添加图标，添加根据需求添加测试集。例：以个体推广员接口为例，创建测试集。 2.点击“…”图标，使用Add Folder可继续细分测试集，使用Add Request可新创建一个请求工作台。（不推荐按使用） 3.推荐使用在工作台预先设置好请求接口相关数据，然后点击Save添加接口测试用例至测试集。 4.点击测试集右上方箭头展开，点击Run，进入测试集运行设置。 5.一般默认即可即可，点击蓝色按钮运行测试。Environment：环境变量Lterations：循环次数Delay：启动时间Log Responses：记录响应信息，可选择所有、失败、不记录Data：测试数据，支持从外部导入数据 6.测试集运行结束后的测试报告，绿色为PASS，红色为FAIL，点击有详细的请求信息。 可通过Retry，重新进行测试集测试，Export Results可导出json格式的测试数据。 7.添加全局Cookies：点击Add Cookie，根据接口实际情况替换cookie_XX=value，根据续期替换domain。（cookies的作用域，所有该域名的接口都可直接使用添加的cookies） 8.点击齿轮，可添加环境变量。例：图三中添加了所有接口的基础Url。Variable：变量名INITIAL VALUE：初始值CURRENT VALUE：最新值设置环境变量后，对应的Url需使用参数化替换，参数变量名需与添加Variable时一致。 9.点击code，可以生成基础的接口请求代码语句，根据需求，可选择不同的语言，并使用Copy to Clipboard复制到剪贴板。 10.Postman还具有接口自动录制功能，点击雷达图标，进入代理设置。Port：代理端口（默认5555）Target：自动录制接口的保存目录Filters选项：通过正则表达式来筛选关心，不关心的Url，以及请求方法。开启代理功能后，在浏览器中设置代理服务器，便可通过访问网站自动录制接口集了。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Postman可以通过三方工具xmysql连接mysql数据库，对mysql数据库进行增删查改，并提取数据作为断言依据。安装xmysql前需安装nodejs，并配置环境变量。使用npm –g install xmysql进行安装使用xmysql -h host_name -u user_name -p user_password -d database_name命令连接mysql数据库。 Postman的输入Url：http://(数据库IP):3000/api/(数据表名)GET：查询该表数据POST：该表新增行数据DELETE：该表删除数据PATCH：更新行数据连接Mysql数据库后，可以在Tests中使用JS语言编写脚本，通过获取数据库的数据设置断言等等。（细节用法有兴趣的小伙伴可以自行研究） 除以上描述的功能外，Postman可以结合其他工具，执行API持续集成测试。例：Postman+Newman+Jenkins，下面做下简单的介绍。Newman是专门用来运行Postman编写好的脚本的工具，需要额外安装。（安装Newman前需保证已安装nodejs，并配置好nodejs的环境变量。）1.在Jenkins分布服务器A下使用npm install –g newman进行安装，并使用newman –version确认newman安装成功。2.导出Postman中所需的测试集文件，如下：选择测试集，点击“…”，点击Export，建议按照推荐以Collection v2.1导出测试集的json文件，并放入Jenkins分布服务器A的A文件夹中 如图所示，下载测试集所需的环境变量及全局变量，同样放入Jenkins分布服务器A的A文件夹中 在Jenkins中构建器中，构建newman的运行任务。基本命令：newman run 测试集json文件路径常用命令参数：-e 指定环境变量文件的路径 –reporters-html-export 指定生成Html报告路径-g 指定全局变量文件路径 -n case 运行次数，默认为1-folder 运行测试集中指定的子集 -reporters 指定生成报告格式 在构建后操作中，对生成报告的路径，名字等进行配置。Jenkins运行该任务后，便可在查看相应的测试报告了。（很多细节部分，有兴趣的小伙伴可自行研究。）","path":"2020/09/28/Postman界面及常用功能介绍/","date":"09-28","excerpt":"","tags":[{"name":"Postman","slug":"Postman","permalink":"https://zym27187.github.io/tags/Postman/"}],"preview":"https://i.loli.net/2019/07/22/5d3580065700a19738.png"},{"title":"关于本网站是如何建成的","text":"技术汇总Node.jsgithexo你可能需要了解:JavaScriptEJS模板 Hexo初始化1.你需要下载Node.js并安装,安装配置教程。 2.你需要下载git并安装。 然后打开Git Bash，将你的Git与GitHub帐号绑定，依次输入指令：git config --global user.name&quot;你的GitHub用户名&quot;git config --global user.email&quot;你的GitHub注册邮箱&quot;生成你的密钥文件：ssh-keygen -t rsa -C&quot;你的GitHub注册邮箱&quot;然后直接三个回车即可，默认不需要设置密码 然后找到生成的.ssh的文件夹中的id_rsa.pub密钥，将内容全部复制打开GitHub_Settings_keys页面，新建new SSH KeyTitle为标题，任意填即可，将刚刚复制的id_rsa.pub内容粘贴进去，最后点击Add SSH key。在Git Bash中检测GitHub公钥设置是否成功，输入 ssh git@github.com如上则说明成功。 这里之所以设置GitHub密钥原因是，通过非对称加密的公钥与私钥来完成加密，公钥放置在GitHub上，私钥放置在自己的电脑里。GitHub要求每次推送代码都是合法用户，所以每次推送都需要输入账号密码验证推送用户是否是合法用户，为了省去每次输入密码的步骤，采用了ssh，当你推送的时候，git就会匹配你的私钥跟GitHub上面的公钥是否是配对的，若是匹配就认为你是合法用户，则允许推送。这样可以保证每次的推送都是正确合法的。 3.安装hexo,打开Git bash依次执行(首先需要跳转到你本地的your-user-name.github.io文件夹目录) npm install -g hexo-cli hexo init &lt;folder&gt; 如果指定 &lt;folder&gt;，便会在目前的资料夹建立一个名为 &lt;folder&gt; 的新资料夹；否则会在目前资料夹初始化。 npm install 安装依赖 hexo generate 生成网站 hexo server 启动本地服务器 网站会执行在http://localhost:port （port 预设为 4000，可在站点配置文件_config.yml 中设定） 安装gal主题安装gal主题,参考hexo-theme-gal的步骤一步一步配置，或者可以自行选择其他你喜欢的hexo主题下载配置 这里主要讲一下几个坑点，1.生成分类页和标签页的时候不仅要添加type还要添加layout，否则就是no found，具体请看hexo 下的分类和表签无法显示，怎么解决？ - 虾哔哔的回答 - 知乎例如 1 title: tags 2 date: 2018-12-09 17:26:37 3 type: tags 4 layout: &quot;tags&quot; layout指向gal主题里的layout文件夹路径 2.关于自定义页,需要在hexo站点目下运行:hexo new page about 创建的页面在 站点根目录/sourse里配置 3.favicon.ico需要放到 站点根目录/sourse，碰到favicon没变的情况是缓存原因，常规清除浏览数据手段无效，需要手动去放置favicon缓存文件的位置删除，路径自行搜索 4.该主题的友情链接和个人链接设为false是不生效的，因为代码中没进行这样的判断，如不需要请自行找到/themes/gal/layout/_partial下的sidebar.js修改 5.评论系统使用的是gitment，听说不太好使，经常加载不出来，但是我用的海星。唯一的缺点是每篇文章第一次都要手动初始化一遍评论。配置评论系统的前置你已经部署好站点了，具体步骤根据这个来 GitHub创建个人仓库在部署到GitHubPages前，需要创建GitHub个人仓库 登录到GitHub,如果没有GitHub帐号，使用你的邮箱注册GitHub帐号：Build software better, together点击GitHub中的New repository创建新仓库，仓库名应该为：用户名.github.io这个用户名使用你的GitHub帐号名称代替，这是固定写法，比如我的仓库名为： 发布到 GitHubPages发布之前首先要将Hexo与GitHub关联起来，打开站点配置文件_config.yml，翻到最后修改为： deploy: type: git repo: 这里填入你之前在GitHub上创建仓库的完整路径,记得加上.git branch: master //分支为master参考如下： 其实就是给hexo d 这个命令做相应的配置，让hexo知道你要把blog部署在哪个位置接下来分别输入三条命令：hexo clean 清除站点缓存hexo g 生成站点hexo d 部署站点 &nbsp;&nbsp;&nbsp;&nbsp;然后你的站点就已经上线了，可以在网络上被访问了。后续有更改后需要重新执行三条命令部署站点关于网站源码备份最好的方式是在之前创建的个人仓库中新增一个分支，把源码备份上去 1.进入本地的your-user-name.github.io文件夹下2.在本地新建一个分支： git branch hexo3.切换到你的新分支: git checkout hexo4.将新分支发布在github上： git push origin hexo5.在github网站设置hexo为默认分支 进入本地的your-user-name.github.io文件夹下 git clone https://github.com/your-user-name/your-user-name.github.io.git此时显示分支为hexo git add --all git commit -m &quot;blog source commit&quot; git push origin hexo &nbsp;&nbsp;&nbsp;&nbsp;至此博客源代码就备份到了hexo分支上面。域名绑定域名需要购买，过段时间有空再研究。 tips:文章推荐用markdown来写，比较方便。Markdown语法说明","path":"2020/07/17/关于本网站是如何建成的/","date":"07-17","excerpt":"","tags":[{"name":"建站","slug":"建站","permalink":"https://zym27187.github.io/tags/建站/"},{"name":"教程","slug":"教程","permalink":"https://zym27187.github.io/tags/教程/"},{"name":"hexo","slug":"hexo","permalink":"https://zym27187.github.io/tags/hexo/"}],"preview":"https://i.loli.net/2019/06/11/5cff1138c47ed80884.jpg"}]}